micronaut:
  application:
    name: hoerbuchdienst
  server:
    port: 8080
    context-path: /
  router:
    static-resources:
      default:
        enabled: true
        mapping: "/**"
        paths: "classpath:static"
      swagger:
        paths: classpath:META-INF/swagger
        mapping: /swagger/**
      #swagger-ui:
      #  paths: classpath:META-INF/swagger/views/swagger-ui
      #  mapping: /swagger-ui/**
  views:
    csp:
      enabled: true
  caches:
    audiobookRepository:
      maximumSize: 10
  jcache:
    enabled: true
  security:
    enabled: true
    endpoints:
      login:
        enabled: false
      oauth:
        enabled: false
    intercept-url-map:
      - pattern: /swagger/**
        access:
          - isAnonymous()
      - pattern: /swagger-ui/**
        access:
          - isAnonymous()
      - pattern: /rapidoc/**
        access:
          - isAnonymous()
      - pattern: /redoc/**
        access:
          - isAnonymous()

hoerbuchdienst:
  repository:
    type: objectstorage
    localdisk:
      uri: /path/to/Buecher-WBH
    objectstorage:
      name: minio
  temporary:
    path: ${java.io.tmpdir}/hoerbuchdienst
  piracy:
    inquiry:
      urlprefix: https://wbh-online.de/q-ausleihe

objectstorage:
  minio:
    bucketName: hoerbuchdienst
    serversideencryption: atRest

rabbitmq:
  servers:
    default:
      automatic-recovery-enabled: true

logger:
  levels:
    root: ERROR
    wbh.bookworm.hoerbuchdienst: ERROR
    io.micronaut.web.router: ERROR
    io.micronaut.web: ERROR
    io.micronaut.http.server: ERROR
    io.micronaut.http: ERROR
    io.micronaut.scheduling: ERROR
    io.micronaut.rabbitmq: ERROR
    io.micronaut.context.condition: ERROR
    io.micronaut.context.env: ERROR
    io.micronaut.context: ERROR
    io.micronaut.core.reflect: ERROR
    io.micronaut.core: ERROR
    io.micronaut: ERROR
    io.netty: ERROR
